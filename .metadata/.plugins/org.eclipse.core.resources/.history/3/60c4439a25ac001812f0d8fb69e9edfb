package com.example.demo.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.hibernate.annotations.common.reflection.java.generics.TypeEnvironmentFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.model.Info;
import com.example.demo.model.User;
import com.example.demo.repository.FriendsRepository;
import com.example.demo.repository.UserInterestRepository;
import com.example.demo.repository.UserRepository;
import com.example.demo.service.SearchFriendService;

@RestController
@RequestMapping("/friends")
public class FriendsController {
	@Autowired
	private SearchFriendService searchFriendService;
	@Autowired
	private FriendsRepository friendRepository;
	@Autowired
	private UserInterestRepository userInterestRepository;
	@Autowired
	private UserRepository userRepository;
	
	@RequestMapping()
	public List<User> SearchFriends(boolean filter, @RequestParam(defaultValue="0") int si, @RequestParam(defaultValue="0") int gu
			, @RequestParam(defaultValue="null") Boolean gender, @RequestParam(defaultValue="0") int interest
			, @RequestParam(defaultValue="0") int minAge, @RequestParam(defaultValue="0") int maxAge) {
		if(filter) {
			System.out.println("SearchFriends");
			System.out.println(""+si+gu+gender);
			System.out.println("interest "+interest);
			searchFriendService.SearchFriends(si, gu, gender, interest, minAge, maxAge);
			System.out.println(userInterestRepository.seqByCode(interest));
			List<Integer> userList = userInterestRepository.seqByCode(interest);
			List<User> likeUser = new ArrayList<>();
			for(int seq : userList) {
				User user = userRepository.findBySeq(seq);
				int userAge = new Date().getYear() - user.getBirth().getYear();
				System.out.println(userAge);
				if(user.getSi() == si && user.getGu() == gu && user.isGender() == gender && userAge >= minAge && userAge <= maxAge) {
					likeUser.add(user);
				}
			}
			return likeUser;
		}
		return null;
	}
}
